namespace Polish.NumbersInWords.Tests.NumberInWordsProviders.ComplexNumbers.Cardinal
{
    public class CardinalTests
    {
        #region Masculine Nominative
        [Theory]
        [InlineData(0, "zero")]
        [InlineData(1, "jeden")]
        [InlineData(2, "dwa")]
        [InlineData(3, "trzy")]
        [InlineData(4, "cztery")]
        [InlineData(5, "pięć")]
        [InlineData(6, "sześć")]
        [InlineData(7, "siedem")]
        [InlineData(8, "osiem")]
        [InlineData(9, "dziewięć")]
        [InlineData(10, "dziesięć")]
        [InlineData(11, "jedenaście")]
        [InlineData(12, "dwanaście")]
        [InlineData(13, "trzynaście")]
        [InlineData(14, "czternaście")]
        [InlineData(15, "piętnaście")]
        [InlineData(16, "szesnaście")]
        [InlineData(17, "siedemnaście")]
        [InlineData(18, "osiemnaście")]
        [InlineData(19, "dziewiętnaście")]
        [InlineData(20, "dwadzieścia")]
        [InlineData(30, "trzydzieści")]
        [InlineData(40, "czterdzieści")]
        [InlineData(50, "pięćdziesiąt")]
        [InlineData(60, "sześćdziesiąt")]
        [InlineData(70, "siedemdziesiąt")]
        [InlineData(80, "osiemdziesiąt")]
        [InlineData(90, "dziewięćdziesiąt")]
        [InlineData(21, "dwadzieścia jeden")]
        [InlineData(32, "trzydzieści dwa")]
        [InlineData(43, "czterdzieści trzy")]
        [InlineData(100, "sto")]
        [InlineData(200, "dwieście")]
        [InlineData(300, "trzysta")]
        [InlineData(400, "czterysta")]
        [InlineData(500, "pięćset")]
        [InlineData(600, "sześćset")]
        [InlineData(700, "siedemset")]
        [InlineData(800, "osiemset")]
        [InlineData(900, "dziewięćset")]
        [InlineData(101, "sto jeden")]
        [InlineData(202, "dwieście dwa")]
        [InlineData(310, "trzysta dziesięć")]
        [InlineData(412, "czterysta dwanaście")]
        [InlineData(556, "pięćset pięćdziesiąt sześć")]
        [InlineData(1000, "tysiąc")]
        [InlineData(1000000, "milion")]
        [InlineData(1000000000, "miliard")]
        [InlineData(1000000000000, "bilion")]
        [InlineData(2000, "dwa tysiące")]
        [InlineData(5000, "pięć tysięcy")]
        [InlineData(101000, "sto jeden tysięcy")]
        [InlineData(206000, "dwieście sześć tysięcy")]
        [InlineData(1234567890, "miliard dwieście trzydzieści cztery miliony pięćset sześćdziesiąt siedem tysięcy osiemset dziewięćdziesiąt")]
        [InlineData(1001001001, "miliard milion tysiąc jeden")]
        [InlineData(413254, "czterysta trzynaście tysięcy dwieście pięćdziesiąt cztery")]
        public void ToWords_nominative(long number, string expectedWords)
        {
            string resultWords = number.ToPolishWords();
            Assert.Equal(expectedWords, resultWords);
        }
        #endregion

        #region Masculine Genitive
        [Theory]
        [InlineData(0, "zera")]
        [InlineData(1, "jednego")]
        [InlineData(2, "dwóch")]
        [InlineData(3, "trzech")]
        [InlineData(4, "czterech")]
        [InlineData(5, "pięciu")]
        [InlineData(6, "sześciu")]
        [InlineData(7, "siedmiu")]
        [InlineData(8, "ośmiu")]
        [InlineData(9, "dziewięciu")]
        [InlineData(10, "dziesięciu")]
        [InlineData(11, "jedenastu")]
        [InlineData(12, "dwunastu")]
        [InlineData(13, "trzynastu")]
        [InlineData(14, "czternastu")]
        [InlineData(15, "piętnastu")]
        [InlineData(16, "szesnastu")]
        [InlineData(17, "siedemnastu")]
        [InlineData(18, "osiemnastu")]
        [InlineData(19, "dziewiętnastu")]
        [InlineData(20, "dwudziestu")]
        [InlineData(30, "trzydziestu")]
        [InlineData(40, "czterdziestu")]
        [InlineData(50, "pięćdziesięciu")]
        [InlineData(60, "sześćdziesięciu")]
        [InlineData(70, "siedemdziesięciu")]
        [InlineData(80, "osiemdziesięciu")]
        [InlineData(90, "dziewięćdziesięciu")]
        [InlineData(21, "dwudziestu jeden")]
        [InlineData(32, "trzydziestu dwóch")]
        [InlineData(43, "czterdziestu trzech")]
        [InlineData(100, "stu")]
        [InlineData(200, "dwustu")]
        [InlineData(300, "trzystu")]
        [InlineData(400, "czterystu")]
        [InlineData(500, "pięciuset")]
        [InlineData(600, "sześciuset")]
        [InlineData(700, "siedmiuset")]
        [InlineData(800, "ośmiuset")]
        [InlineData(900, "dziewięciuset")]
        [InlineData(101, "stu jeden")]
        [InlineData(202, "dwustu dwóch")]
        [InlineData(310, "trzystu dziesięciu")]
        [InlineData(412, "czterystu dwunastu")]
        [InlineData(556, "pięciuset pięćdziesięciu sześciu")]
        [InlineData(1000, "tysiąca")]
        [InlineData(1000000, "miliona")]
        [InlineData(1000000000, "miliarda")]
        [InlineData(1000000000000, "biliona")]
        [InlineData(2000, "dwóch tysięcy")]
        [InlineData(5000, "pięciu tysięcy")]
        [InlineData(101000, "stu jeden tysięcy")]
        [InlineData(206000, "dwustu sześciu tysięcy")]
        [InlineData(1234567890, "miliarda dwustu trzydziestu czterech milionów pięciuset sześćdziesięciu siedmiu tysięcy ośmiuset dziewięćdziesięciu")]
        [InlineData(1001001001, "miliarda miliona tysiąca jeden")]

        public void ToWords_genitive(long number, string expectedWords)
        {
            string resultWords = number.ToPolishWords().Case(Case.Genitive);
            Assert.Equal(expectedWords, resultWords);
        }
        #endregion

        #region Masculine Dative
        [Theory]
        [InlineData(0, "zeru")]
        [InlineData(1, "jednemu")]
        [InlineData(2, "dwóm")]
        [InlineData(3, "trzem")]
        [InlineData(4, "czterem")]
        [InlineData(5, "pięciu")]
        [InlineData(6, "sześciu")]
        [InlineData(7, "siedmiu")]
        [InlineData(8, "ośmiu")]
        [InlineData(9, "dziewięciu")]
        [InlineData(10, "dziesięciu")]
        [InlineData(11, "jedenastu")]
        [InlineData(12, "dwunastu")]
        [InlineData(13, "trzynastu")]
        [InlineData(14, "czternastu")]
        [InlineData(15, "piętnastu")]
        [InlineData(16, "szesnastu")]
        [InlineData(17, "siedemnastu")]
        [InlineData(18, "osiemnastu")]
        [InlineData(19, "dziewiętnastu")]
        [InlineData(20, "dwudziestu")]
        [InlineData(30, "trzydziestu")]
        [InlineData(40, "czterdziestu")]
        [InlineData(50, "pięćdziesięciu")]
        [InlineData(60, "sześćdziesięciu")]
        [InlineData(70, "siedemdziesięciu")]
        [InlineData(80, "osiemdziesięciu")]
        [InlineData(90, "dziewięćdziesięciu")]
        [InlineData(21, "dwudziestu jeden")]
        [InlineData(32, "trzydziestu dwóm")]
        [InlineData(43, "czterdziestu trzem")]
        [InlineData(100, "stu")]
        [InlineData(200, "dwustu")]
        [InlineData(300, "trzystu")]
        [InlineData(400, "czterystu")]
        [InlineData(500, "pięciuset")]
        [InlineData(600, "sześciuset")]
        [InlineData(700, "siedmiuset")]
        [InlineData(800, "ośmiuset")]
        [InlineData(900, "dziewięciuset")]
        [InlineData(101, "stu jeden")]
        [InlineData(202, "dwustu dwóm")]
        [InlineData(310, "trzystu dziesięciu")]
        [InlineData(412, "czterystu dwunastu")]
        [InlineData(556, "pięciuset pięćdziesięciu sześciu")]
        [InlineData(1000, "tysiącowi")]
        [InlineData(1000000, "milionowi")]
        [InlineData(1000000000, "miliardowi")]
        [InlineData(1000000000000, "bilionowi")]
        [InlineData(2000, "dwóm tysiącom")]
        [InlineData(5000, "pięciu tysiącom")]
        [InlineData(101000, "stu jeden tysiącom")]
        [InlineData(206000, "dwustu sześciu tysiącom")]
        [InlineData(1234567890, "miliardowi dwustu trzydziestu czterem milionom pięciuset sześćdziesięciu siedmiu tysiącom ośmiuset dziewięćdziesięciu")]
        [InlineData(1001001001, "miliardowi milionowi tysiącowi jeden")]

        public void ToWords_dative(long number, string expectedWords)
        {
            string resultWords = number.ToPolishWords().Case(Case.Dative);
            Assert.Equal(expectedWords, resultWords);
        }
        #endregion

        #region Masculine Accusative
        [Theory]
        [InlineData(0, "zero")]
        [InlineData(1, "jeden")]
        [InlineData(2, "dwa")]
        [InlineData(3, "trzy")]
        [InlineData(4, "cztery")]
        [InlineData(5, "pięć")]
        [InlineData(6, "sześć")]
        [InlineData(7, "siedem")]
        [InlineData(8, "osiem")]
        [InlineData(9, "dziewięć")]
        [InlineData(10, "dziesięć")]
        [InlineData(11, "jedenaście")]
        [InlineData(12, "dwanaście")]
        [InlineData(13, "trzynaście")]
        [InlineData(14, "czternaście")]
        [InlineData(15, "piętnaście")]
        [InlineData(16, "szesnaście")]
        [InlineData(17, "siedemnaście")]
        [InlineData(18, "osiemnaście")]
        [InlineData(19, "dziewiętnaście")]
        [InlineData(20, "dwadzieścia")]
        [InlineData(30, "trzydzieści")]
        [InlineData(40, "czterdzieści")]
        [InlineData(50, "pięćdziesiąt")]
        [InlineData(60, "sześćdziesiąt")]
        [InlineData(70, "siedemdziesiąt")]
        [InlineData(80, "osiemdziesiąt")]
        [InlineData(90, "dziewięćdziesiąt")]
        [InlineData(21, "dwadzieścia jeden")]
        [InlineData(32, "trzydzieści dwa")]
        [InlineData(43, "czterdzieści trzy")]
        [InlineData(100, "sto")]
        [InlineData(200, "dwieście")]
        [InlineData(300, "trzysta")]
        [InlineData(400, "czterysta")]
        [InlineData(500, "pięćset")]
        [InlineData(600, "sześćset")]
        [InlineData(700, "siedemset")]
        [InlineData(800, "osiemset")]
        [InlineData(900, "dziewięćset")]
        [InlineData(101, "sto jeden")]
        [InlineData(202, "dwieście dwa")]
        [InlineData(310, "trzysta dziesięć")]
        [InlineData(412, "czterysta dwanaście")]
        [InlineData(556, "pięćset pięćdziesiąt sześć")]
        [InlineData(1000, "tysiąc")]
        [InlineData(1000000, "milion")]
        [InlineData(1000000000, "miliard")]
        [InlineData(1000000000000, "bilion")]
        [InlineData(2000, "dwa tysiące")]
        [InlineData(5000, "pięć tysięcy")]
        [InlineData(101000, "sto jeden tysięcy")]
        [InlineData(206000, "dwieście sześć tysięcy")]
        [InlineData(1234567890, "miliard dwieście trzydzieści cztery miliony pięćset sześćdziesiąt siedem tysięcy osiemset dziewięćdziesiąt")]
        [InlineData(1001001001, "miliard milion tysiąc jeden")]
        public void ToWords_accusative(long number, string expectedWords)
        {
            string resultWords = number.ToPolishWords().Case(Case.Accusative);
            Assert.Equal(expectedWords, resultWords);
        }
        #endregion

        #region Masculine Instrumental
        [Theory]
        [InlineData(0, "zerem")]
        [InlineData(1, "jednym")]
        [InlineData(2, "dwoma")]
        [InlineData(3, "trzema")]
        [InlineData(4, "czterema")]
        [InlineData(5, "pięcioma")]
        [InlineData(6, "sześcioma")]
        [InlineData(7, "siedmioma")]
        [InlineData(8, "ośmioma")]
        [InlineData(9, "dziewięcioma")]
        [InlineData(10, "dziesięcioma")]
        [InlineData(11, "jedenastoma")]
        [InlineData(12, "dwunastoma")]
        [InlineData(13, "trzynastoma")]
        [InlineData(14, "czternastoma")]
        [InlineData(15, "piętnastoma")]
        [InlineData(16, "szesnastoma")]
        [InlineData(17, "siedemnastoma")]
        [InlineData(18, "osiemnastoma")]
        [InlineData(19, "dziewiętnastoma")]
        [InlineData(20, "dwudziestoma")]
        [InlineData(30, "trzydziestoma")]
        [InlineData(40, "czterdziestoma")]
        [InlineData(50, "pięćdziesięcioma")]
        [InlineData(60, "sześćdziesięcioma")]
        [InlineData(70, "siedemdziesięcioma")]
        [InlineData(80, "osiemdziesięcioma")]
        [InlineData(90, "dziewięćdziesięcioma")]
        [InlineData(21, "dwudziestoma jeden")]
        [InlineData(32, "trzydziestoma dwoma")]
        [InlineData(43, "czterdziestoma trzema")]
        [InlineData(100, "stu")]
        [InlineData(200, "dwustu")]
        [InlineData(300, "trzystu")]
        [InlineData(400, "czterystu")]
        [InlineData(500, "pięciuset")]
        [InlineData(600, "sześciuset")]
        [InlineData(700, "siedmiuset")]
        [InlineData(800, "ośmiuset")]
        [InlineData(900, "dziewięciuset")]
        [InlineData(101, "stu jeden")]
        [InlineData(202, "dwustu dwoma")]
        [InlineData(310, "trzystu dziesięcioma")]
        [InlineData(412, "czterystu dwunastoma")]
        [InlineData(556, "pięciuset pięćdziesięcioma sześcioma")]
        [InlineData(1000, "tysiącem")]
        [InlineData(1000000, "milionem")]
        [InlineData(1000000000, "miliardem")]
        [InlineData(1000000000000, "bilionem")]
        [InlineData(2000, "dwoma tysiącami")]
        [InlineData(5000, "pięcioma tysiącami")]
        [InlineData(101000, "stu jeden tysiącami")]
        [InlineData(206000, "dwustu sześcioma tysiącami")]
        [InlineData(1234567890, "miliardem dwustu trzydziestoma czterema milionami pięciuset sześćdziesięcioma siedmioma tysiącami ośmiuset dziewięćdziesięcioma")]
        [InlineData(1001001001, "miliardem milionem tysiącem jeden")]
        [InlineData(1767055722, "miliardem siedmiuset sześćdziesięcioma siedmioma milionami pięćdziesięcioma pięcioma tysiącami siedmiuset dwudziestoma dwoma")]
        public void ToWords_instrumental(long number, string expectedWords)
        {
            string resultWords = number.ToPolishWords().Case(Case.Instrumental);
            Assert.Equal(expectedWords, resultWords);
        }
        #endregion

        #region Masculine Locative
        [Theory]
        [InlineData(0, "zerze")]
        [InlineData(1, "jednym")]
        [InlineData(2, "dwóch")]
        [InlineData(3, "trzech")]
        [InlineData(4, "czterech")]
        [InlineData(5, "pięciu")]
        [InlineData(6, "sześciu")]
        [InlineData(7, "siedmiu")]
        [InlineData(8, "ośmiu")]
        [InlineData(9, "dziewięciu")]
        [InlineData(10, "dziesięciu")]
        [InlineData(11, "jedenastu")]
        [InlineData(12, "dwunastu")]
        [InlineData(13, "trzynastu")]
        [InlineData(14, "czternastu")]
        [InlineData(15, "piętnastu")]
        [InlineData(16, "szesnastu")]
        [InlineData(17, "siedemnastu")]
        [InlineData(18, "osiemnastu")]
        [InlineData(19, "dziewiętnastu")]
        [InlineData(20, "dwudziestu")]
        [InlineData(30, "trzydziestu")]
        [InlineData(40, "czterdziestu")]
        [InlineData(50, "pięćdziesięciu")]
        [InlineData(60, "sześćdziesięciu")]
        [InlineData(70, "siedemdziesięciu")]
        [InlineData(80, "osiemdziesięciu")]
        [InlineData(90, "dziewięćdziesięciu")]
        [InlineData(21, "dwudziestu jeden")]
        [InlineData(32, "trzydziestu dwóch")]
        [InlineData(43, "czterdziestu trzech")]
        [InlineData(100, "stu")]
        [InlineData(200, "dwustu")]
        [InlineData(300, "trzystu")]
        [InlineData(400, "czterystu")]
        [InlineData(500, "pięciuset")]
        [InlineData(600, "sześciuset")]
        [InlineData(700, "siedmiuset")]
        [InlineData(800, "ośmiuset")]
        [InlineData(900, "dziewięciuset")]
        [InlineData(101, "stu jeden")]
        [InlineData(202, "dwustu dwóch")]
        [InlineData(310, "trzystu dziesięciu")]
        [InlineData(412, "czterystu dwunastu")]
        [InlineData(556, "pięciuset pięćdziesięciu sześciu")]
        [InlineData(1000, "tysiącu")]
        [InlineData(1000000, "milionie")]
        [InlineData(1000000000, "miliardzie")]
        [InlineData(1000000000000, "bilionie")]
        [InlineData(2000, "dwóch tysiącach")]
        [InlineData(5000, "pięciu tysiącach")]
        [InlineData(101000, "stu jeden tysiącach")]
        [InlineData(206000, "dwustu sześciu tysiącach")]
        [InlineData(1234567890, "miliardzie dwustu trzydziestu czterech milionach pięciuset sześćdziesięciu siedmiu tysiącach ośmiuset dziewięćdziesięciu")]
        [InlineData(1001001001, "miliardzie milionie tysiącu jeden")]
        public void ToWords_locative(long number, string expectedWords)
        {
            string resultWords = number.ToPolishWords().Case(Case.Locative);
            Assert.Equal(expectedWords, resultWords);
        }
        #endregion

        #region Masculine Vocative
        [Theory]
        [InlineData(0, "zero")]
        [InlineData(1, "jeden")]
        [InlineData(2, "dwa")]
        [InlineData(3, "trzy")]
        [InlineData(4, "cztery")]
        [InlineData(5, "pięć")]
        [InlineData(6, "sześć")]
        [InlineData(7, "siedem")]
        [InlineData(8, "osiem")]
        [InlineData(9, "dziewięć")]
        [InlineData(10, "dziesięć")]
        [InlineData(11, "jedenaście")]
        [InlineData(12, "dwanaście")]
        [InlineData(13, "trzynaście")]
        [InlineData(14, "czternaście")]
        [InlineData(15, "piętnaście")]
        [InlineData(16, "szesnaście")]
        [InlineData(17, "siedemnaście")]
        [InlineData(18, "osiemnaście")]
        [InlineData(19, "dziewiętnaście")]
        [InlineData(20, "dwadzieścia")]
        [InlineData(30, "trzydzieści")]
        [InlineData(40, "czterdzieści")]
        [InlineData(50, "pięćdziesiąt")]
        [InlineData(60, "sześćdziesiąt")]
        [InlineData(70, "siedemdziesiąt")]
        [InlineData(80, "osiemdziesiąt")]
        [InlineData(90, "dziewięćdziesiąt")]
        [InlineData(21, "dwadzieścia jeden")]
        [InlineData(32, "trzydzieści dwa")]
        [InlineData(43, "czterdzieści trzy")]
        [InlineData(100, "sto")]
        [InlineData(200, "dwieście")]
        [InlineData(300, "trzysta")]
        [InlineData(400, "czterysta")]
        [InlineData(500, "pięćset")]
        [InlineData(600, "sześćset")]
        [InlineData(700, "siedemset")]
        [InlineData(800, "osiemset")]
        [InlineData(900, "dziewięćset")]
        [InlineData(101, "sto jeden")]
        [InlineData(202, "dwieście dwa")]
        [InlineData(310, "trzysta dziesięć")]
        [InlineData(412, "czterysta dwanaście")]
        [InlineData(556, "pięćset pięćdziesiąt sześć")]
        [InlineData(1000, "tysiąc")]
        [InlineData(1000000, "milion")]
        [InlineData(1000000000, "miliard")]
        [InlineData(1000000000000, "bilion")]
        [InlineData(2000, "dwa tysiące")]
        [InlineData(5000, "pięć tysięcy")]
        [InlineData(101000, "sto jeden tysięcy")]
        [InlineData(206000, "dwieście sześć tysięcy")]
        [InlineData(1234567890, "miliard dwieście trzydzieści cztery miliony pięćset sześćdziesiąt siedem tysięcy osiemset dziewięćdziesiąt")]
        [InlineData(1001001001, "miliard milion tysiąc jeden")]
        public void ToWords_vocative(long number, string expectedWords)
        {
            string resultWords = number.ToPolishWords().Case(Case.Vocative);
            Assert.Equal(expectedWords, resultWords);
        }
        #endregion

    }
}
